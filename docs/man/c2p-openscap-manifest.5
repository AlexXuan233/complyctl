.\" Automatically generated by Pandoc 3.1.11.1
.\"
.TH "C2P\-OPENSCAP\-MANIFEST.JSON" "5" "June 2025" "complyctl OpenSCAP Plugin Configuration" ""
.SH NAME
c2p\-openscap\-manifest.json \- Configuration file for the OpenSCAP
plugin used by complyctl
.SH DESCRIPTION
This file defines the metadata and runtime configuration options for the
\f[CR]openscap\-plugin\f[R], a plugin to be used with
\f[CR]complyctl\f[R].
.PP
It is a JSON\-formatted file typically installed at:
.PP
\f[B]/usr/share/complyctl/plugins/c2p\-openscap\-manifest.json\f[R]
.PP
Some configuration options used by \f[CR]openscap\-plugin\f[R] can be
overridden by using a drop\-in file with the same name in
\[lq]\f[CR]/etc/complyctl/config.d/\f[R]\[rq]:
.PP
\f[B]/etc/complyctl/config.d/c2p\-openscap\-manifest.json\f[R]
.PP
The easiest way to create a drop\-in file is copying
\f[B]/usr/share/complyctl/plugins/c2p\-openscap\-manifest.json\f[R] and
defining the \f[CR]default\f[R] values.
Any other content can be removed to keep the drop\-in file clean.
See \f[B]CONFIGURATION OPTIONS\f[R] and \f[B]EXAMPLES\f[R] sections for
more details.
.PP
For some specific cases, it is also possible to inform a custom
configuration directory to override \f[CR]/etc/complyctl/config.d\f[R].
For example, the following command will try to locate and read custom
settings from manifest files hosted in \f[CR]/tmp/plugins\-conf\f[R]
instead of \f[CR]/etc/complyctl/config.d\f[R]:
.PP
\f[CR]complyctl generate \-\-plugin\-config /tmp/plugins\-conf\f[R]
.PP
See complyctl(1) for more details about the available options.
.SH FILE FORMAT
The configuration is a single JSON object with the following top\-level
keys:
.IP \[bu] 2
\f[CR]metadata\f[R]: General plugin information
.IP \[bu] 2
\f[CR]executablePath\f[R]: Name or path of the plugin binary
.IP \[bu] 2
\f[CR]sha256\f[R]: The checksum of the binary (used for integrity
checks)
.IP \[bu] 2
\f[CR]configuration\f[R]: An array of runtime configuration options
.SH FIELDS
.SS metadata
.IP
.EX
{
  \[dq]id\[dq]: \[dq]openscap\[dq],
  \[dq]description\[dq]: \[dq]My openscap plugin\[dq],
  \[dq]version\[dq]: \[dq]0.0.1\[dq],
  \[dq]types\[dq]: [ \[dq]pvp\[dq] ]
}
.EE
.SS executablePath
Path or name of the plugin binary to execute.
Typically just:
.IP
.EX
\[dq]executablePath\[dq]: \[dq]openscap\-plugin\[dq]
.EE
.SS sha256
SHA256 checksum of the plugin binary, used for runtime verification.
.SS configuration
A list of supported configuration parameters for the plugin.
.PP
Each entry includes:
.IP \[bu] 2
name: The name of the parameter
.IP \[bu] 2
description: Explanation of its purpose
.IP \[bu] 2
required: Whether this parameter must be provided
.IP \[bu] 2
default (optional): The default value if not specified
.SH CONFIGURATION OPTIONS
.SS workspace (required)
Directory for writing plugin artifacts.
The value is inherited from complyctl and cannot be modified.
.SS profile (required)
The OpenSCAP profile to run for assessment.
The value is inherited from complyctl and cannot be modified.
.SS datastream (optional)
The OpenSCAP datastream to use.
If not set, the plugin will try to determine it based on system
information.
.SS results (optional, default: results.xml)
The name of the generated results file.
.SS arf (optional, default: arf.xml)
The name of the generated ARF file.
.SS policy (optional, default: tailoring_policy.xml)
The name of the generated tailoring file.
.SH EXAMPLES
This is an example of a manifest including all information.
.IP
.EX
{
  \[dq]metadata\[dq]: {
    \[dq]id\[dq]: \[dq]openscap\[dq],
    \[dq]description\[dq]: \[dq]My openscap plugin\[dq],
    \[dq]version\[dq]: \[dq]0.0.1\[dq],
    \[dq]types\[dq]: [
      \[dq]pvp\[dq]
    ]
  },
  \[dq]executablePath\[dq]: \[dq]openscap\-plugin\[dq],
  \[dq]sha256\[dq]: \[dq]17e8d0b82c9bfbe7c195505090954488175005898fc0e8da0812c112c582426c\[dq],
  \[dq]configuration\[dq]: [
    {
      \[dq]name\[dq]: \[dq]workspace\[dq],
      \[dq]description\[dq]: \[dq]Directory for writing plugin artifacts\[dq],
      \[dq]required\[dq]: true
    },
    {
      \[dq]name\[dq]: \[dq]profile\[dq],
      \[dq]description\[dq]: \[dq]The OpenSCAP profile to run for assessment\[dq],
      \[dq]required\[dq]: true
    },
    {
      \[dq]name\[dq]: \[dq]datastream\[dq],
      \[dq]description\[dq]: \[dq]The OpenSCAP datastream to use. If not set, the plugin will try to determine it based on system information\[dq],
      \[dq]required\[dq]: false
    },
    {
      \[dq]name\[dq]: \[dq]policy\[dq],
      \[dq]description\[dq]: \[dq]The name of the generated tailoring file\[dq],
      \[dq]default\[dq]: \[dq]tailoring_policy.xml\[dq],
      \[dq]required\[dq]: false
    },
    {
      \[dq]name\[dq]: \[dq]arf\[dq],
      \[dq]description\[dq]: \[dq]The name of the generated ARF file\[dq],
      \[dq]default\[dq]: \[dq]arf.xml\[dq],
      \[dq]required\[dq]: false
    },
    {
      \[dq]name\[dq]: \[dq]results\[dq],
      \[dq]description\[dq]: \[dq]The name of the generated results file\[dq],
      \[dq]default\[dq]: \[dq]results.xml\[dq],
      \[dq]required\[dq]: false
    }
  ]
}
.EE
.PP
This is an example of a drop\-in file modifying the openscap files.
.IP
.EX
{
  \[dq]configuration\[dq]: [
    {
      \[dq]name\[dq]: \[dq]policy\[dq],
      \[dq]default\[dq]: \[dq]custom_tailoring_policy.xml\[dq],
    },
    {
      \[dq]name\[dq]: \[dq]arf\[dq],
      \[dq]default\[dq]: \[dq]custom_arf.xml\[dq],
    },
    {
      \[dq]name\[dq]: \[dq]results\[dq],
      \[dq]default\[dq]: \[dq]custom_results.xml\[dq],
    }
  ]
}
.EE
.SH SEE ALSO
complyctl(1)
.PP
See the Upstream project at https://github.com/complytime/complyctl for
more detailed documentation.
.SH AUTHORS
Marcus Burghardt \c
.MT maburgha@redhat.com
.ME \c.
